import { create } from 'zustand';
import { UserBasicProfile } from '@/types/user.type';

export interface UserBasicProfileState {
  [key: string]: any,
  firstName: string,
  middleName: string,
  lastName: string,
  mobileNumber: string,
  emailAddress: string,
  linkedinProfile: string,
  twitterProfile: string,
  country: string,
  region: string,
  residenceCity: string,
  referrer: string,
  mentorExperience: string,
  membershipInterest: Array<any>,
  meetTime: Array<any>,
  basicProfile: UserBasicProfile,
  getFirstName: () => string,
  getMiddleName: () => string,
  getLastName: () => string,
  getMobileNumber: () => string,
  getEmailAddress: () => string,
  getLinkedinProfile: () => string,
  getTwitterProfile: () => string,
  getCountry: () => string,
  getRegion: () => string,
  getRecidenceCity: () => string,
  getReferrer: () => string,
  getMentorExperience: () => string,
  getMembershipInterest: () => Array<any>,
  getMeetTime: () => Array<any>,
  getBasicProfile: () => UserBasicProfile,
  setFirstName: (firstName: string) => void,
  setMiddleName: (middleName: string) => void,
  setLastName: (lastName: string) => void,
  setMobileNumber: (mobileNumber: string) => void,
  setEmailAddress: (emailAddress: string) => void,
  setLinkedinProfile: (linkedinProfile: string) => void,
  setTwitterProfile: (twitterProfile: string) => void,
  setCountry: (country: string) => void,
  setRegion: (region: string) => void,
  setRecidenceCity: (residenceCity: string) => void,
  setReferrer: (referrer: string) => void,
  setMentorExperience: (mentorExperience: string) => void,
  setMembershipInterest: (membershipInterest: Array<any>) => void,
  setMeetTime: (meetTime: Array<any>) => void,
  setBasicProfile: (basicProfile: UserBasicProfile) => void,
}

const useBasicProfileStore = create<UserBasicProfileState>((set, get) => ({
  firstName: "",
  middleName: "",
  lastName: "",
  mobileNumber: "",
  emailAddress: "",
  linkedinProfile: "",
  twitterProfile: "",
  country: "",
  region: "",
  residenceCity: "",
  referrer: "",
  mentorExperience: "",
  membershipInterest: [],
  meetTime: [],
  basicProfile: {},
  getFirstName: () => get().firstName,
  getMiddleName: () => get().middleName,
  getLastName: () => get().lastName,
  getMobileNumber: () => get().mobileNumber,
  getEmailAddress: () => get().emailAddress,
  getLinkedinProfile: () => get().linkedinProfile,
  getTwitterProfile: () => get().twitterProfile,
  getCountry: () => get().country,
  getRegion: () => get().region,
  getRecidenceCity: () => get().residenceCity,
  getReferrer: () => get().referrer,
  getMentorExperience: () => get().mentorExperience,
  getMembershipInterest: () => get().membershipInterest,
  getMeetTime: () => get().meetTime,
  getBasicProfile: () => get().basicProfile,
  setFirstName: (firstName: string) => set((state) => ({ firstName: firstName })),
  setMiddleName: (middleName: string) => set((state) => ({ middleName: middleName })),
  setLastName: (lastName: string) => set((state) => ({ lastName: lastName })),
  setMobileNumber: (mobileNumber: string) => set((state) => ({ mobileNumber: mobileNumber })),
  setEmailAddress: (emailAddress: string) => set((state) => ({ emailAddress: emailAddress })),
  setLinkedinProfile: (linkedinProfile: string) => set((state) => ({ linkedinProfile: linkedinProfile })),
  setTwitterProfile: (twitterProfile: string) => set((state) => ({ twitterProfile: twitterProfile })),
  setCountry: (country: string) => set((state) => ({ country: country })),
  setRegion: (region: string) => set((state) => ({ region: region })),
  setRecidenceCity: (residenceCity: string) => set((state) => ({ residenceCity: residenceCity })),
  setReferrer: (referrer: string) => set((state) => ({ referrer: referrer })),
  setMentorExperience: (mentorExperience: string) => set((state) => ({ mentorExperience: mentorExperience })),
  setMembershipInterest: (membershipInterest: Array<any>) => set((state) => ({ membershipInterest: membershipInterest })),
  setMeetTime: (meetTime: Array<any>) => set((state) => ({ meetTime: meetTime })),
  setBasicProfile: (basicProfileData: UserBasicProfile) => set((state) => ({ basicProfile: basicProfileData }))
}));

export default useBasicProfileStore;